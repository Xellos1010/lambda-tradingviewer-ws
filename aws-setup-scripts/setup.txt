
We need to create a table to house the DeviceUUIDs
a lambda function to check if a deviceUUID is already in the table
a lambda function to register a deviceUUID

Table Creation

Single-Line Commands for On-Demand Billing Mode

For the Dev Environment
aws dynamodb create-table --table-name AskDaoDeviceInformation-DEV --attribute-definitions AttributeName=deviceUUID,AttributeType=S --key-schema AttributeName=deviceUUID,KeyType=HASH --billing-mode PAY_PER_REQUEST --global-secondary-indexes "IndexName=deviceUUID-index,KeySchema=[{AttributeName=deviceUUID,KeyType=HASH}],Projection={ProjectionType=ALL}" --profile SystemDeveloper

For STAGE Environment:
aws dynamodb create-table --table-name AskDaoDeviceInformation-STAGE --attribute-definitions AttributeName=deviceUUID,AttributeType=S --key-schema AttributeName=deviceUUID,KeyType=HASH --billing-mode PAY_PER_REQUEST --global-secondary-indexes "IndexName=deviceUUID-index,KeySchema=[{AttributeName=deviceUUID,KeyType=HASH}],Projection={ProjectionType=ALL}" --profile SystemDeveloper

For PROD Environment:
aws dynamodb create-table --table-name AskDaoDeviceInformation-PROD --attribute-definitions AttributeName=deviceUUID,AttributeType=S --key-schema AttributeName=deviceUUID,KeyType=HASH --billing-mode PAY_PER_REQUEST --global-secondary-indexes "IndexName=deviceUUID-index,KeySchema=[{AttributeName=deviceUUID,KeyType=HASH}],Projection={ProjectionType=ALL}" --profile SystemDeveloper

****************************************************************

Packaging your Lambda function code:

*****
cd to the `lambda_package` directory

Now, you need to create a ZIP archive of the `lambda_package` directory:

Mac
zip -r lambda_function.zip .

Windows
(Native) powershell -Command "Compress-Archive -Path (Get-ChildItem .\index.js, .\package.json, .\node_modules) -DestinationPath lambda_function-DEV.zip"
(7zip) 7z a lambda_function-DEV.zip index.js package.json node_modules\*

(Native) powershell -Command "Compress-Archive -Path (Get-ChildItem .\index.js, .\package.json, .\node_modules) -DestinationPath lambda_function-STAGE.zip"
(7zip) 7z a lambda_function-STAGE.zip index.js package.json node_modules\*

(Native) powershell -Command "Compress-Archive -Path (Get-ChildItem .\index.js, .\package.json, .\node_modules) -DestinationPath lambda_function-PROD.zip"
(7zip) 7z a lambda_function-PROD.zip index.js package.json node_modules\*

*****

Creating the Policies

*****

aws iam create-policy --policy-name AskDaoInvokeUUIDLambdaFunctionsPolicy --policy-document file://InvokeUUIDLambdaFunctionsPolicy.json --profile SystemDeveloper
aws iam create-policy --policy-name InvokeGenerateJWTPolicy --policy-document file://InvokeGenerateJWTPolicy.json --profile SystemDeveloper

*****

Create the Execution Role

*****


**Deprecated until refactor to modularize backend**
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole --policy-arn arn:aws:iam::413988044972:policy/AskDaoInvokeUUIDLambdaFunctionsPolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole --policy-arn arn:aws:iam::413988044972:policy/InvokeGenerateJWTPolicy --profile SystemDeveloper
*****

***DEV***
aws iam create-role --role-name AskDaoKeyExchangeLambdaExecutionRole-DEV --assume-role-policy-document "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}" --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-DEV --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-DEV --policy-arn arn:aws:iam::413988044972:policy/AskDaoGetUUIDPolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-DEV --policy-arn arn:aws:iam::413988044972:policy/AskDaoPutUUIDPolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-DEV --policy-arn arn:aws:iam::413988044972:policy/PutEventBridgePolicy --profile SystemDeveloper

***STAGE***
aws iam create-role --role-name AskDaoKeyExchangeLambdaExecutionRole-STAGE --assume-role-policy-document "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}" --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-STAGE --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-STAGE --policy-arn arn:aws:iam::413988044972:policy/AskDaoGetUUIDPolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-STAGE --policy-arn arn:aws:iam::413988044972:policy/AskDaoPutUUIDPolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-STAGE --policy-arn arn:aws:iam::413988044972:policy/PutEventBridgePolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-STAGE --policy-arn arn:aws:iam::413988044972:policy/PutAskDaoUserTokensPolicy --profile SystemDeveloper

***PROD***
aws iam create-role --role-name AskDaoKeyExchangeLambdaExecutionRole-PROD --assume-role-policy-document "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}" --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-PROD --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-PROD --policy-arn arn:aws:iam::413988044972:policy/AskDaoGetUUIDPolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-PROD --policy-arn arn:aws:iam::413988044972:policy/AskDaoPutUUIDPolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-PROD --policy-arn arn:aws:iam::413988044972:policy/PutEventBridgePolicy --profile SystemDeveloper
aws iam attach-role-policy --role-name AskDaoKeyExchangeLambdaExecutionRole-PROD --policy-arn arn:aws:iam::413988044972:policy/PutAskDaoUserTokensPolicy --profile SystemDeveloper

Create the function 

*****

NodeJS
Create the Lambda function:
aws lambda create-function --function-name AskDaoKeyExchange-DEV --runtime nodejs20.x --role arn:aws:iam::413988044972:role/AskDaoKeyExchangeLambdaExecutionRole-DEV --handler index.handler --zip-file fileb://lambda_function-DEV.zip --profile SystemDeveloper
aws lambda create-function --function-name AskDaoKeyExchange-STAGE --runtime nodejs20.x --role arn:aws:iam::413988044972:role/AskDaoKeyExchangeLambdaExecutionRole-STAGE --handler index.handler --zip-file fileb://lambda_function-STAGE.zip --profile SystemDeveloper
aws lambda create-function --function-name AskDaoKeyExchange-PROD --runtime nodejs20.x --role arn:aws:iam::413988044972:role/AskDaoKeyExchangeLambdaExecutionRole-PROD --handler index.handler --zip-file fileb://lambda_function-PROD.zip --profile SystemDeveloper

aws logs create-log-group --log-group-name /aws/lambda/AskDaoKeyExchange-DEV --profile SystemDeveloper
aws logs create-log-group --log-group-name /aws/lambda/AskDaoKeyExchange-STAGE --profile SystemDeveloper
aws logs create-log-group --log-group-name /aws/lambda/AskDaoKeyExchange-PROD --profile SystemDeveloper

Updating Function Code

aws lambda update-function-code --function-name AskDaoKeyExchange --zip-file fileb://lambda_function.zip  --profile SystemDeveloper

Set Permissions
aws lambda add-permission --function-name AskDaoRegisterAffiliate-DEV --statement-id apigateway-access --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:us-east-1:413988044972:xb8z31jg5g/*/POST/registerAffiliate" --profile SystemDeveloper

aws lambda add-permission --function-name AskDaoKeyExchange-STAGE --statement-id apigateway-access --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:us-east-1:413988044972:xb8z31jg5g/*/POST/initializeDevice" --profile SystemDeveloper

aws lambda add-permission --function-name AskDaoKeyExchange-PROD --statement-id apigateway-access --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:us-east-1:413988044972:xb8z31jg5g/*/POST/initializeDevice" --profile SystemDeveloper

After some testing and with cold start associated to multiple functions we need at max 10 seconds to register a device successfully
aws lambda update-function-configuration --function-name AskDaoKeyExchange-DEV --timeout 10 --profile SystemDeveloper
aws lambda update-function-configuration --function-name AskDaoKeyExchange-STAGE --timeout 10 --profile SystemDeveloper
aws lambda update-function-configuration --function-name AskDaoKeyExchange-PROD --timeout 10 --profile SystemDeveloper

To Test the Device initialization failed we need to set timeout to 1
aws lambda update-function-configuration --function-name AskDaoKeyExchange --timeout 1 --profile SystemDeveloper

*****
Deleting the Function

aws lambda delete-function --function-name AskDaoKeyExchange --profile SystemDeveloper


*****

Updating Function Configurations

*****

Update Environment Variables

aws lambda update-function-configuration --function-name AskDaoKeyExchange --environment file://lambda-config.json --profile SystemDeveloper

*****

Create the API Resource - Non Stage Specific

*****

aws apigateway create-resource --rest-api-id xb8z31jg5g --parent-id vv80kjkok3 --path-part initializeDevice --profile SystemDeveloper

Create a POST method for the resource and integrate it with the corresponding Lambda function:

aws apigateway put-method --rest-api-id xb8z31jg5g --resource-id 3j9y3c --http-method POST --authorization-type "NONE" --profile SystemDeveloper

*****

Updating with API Key Required

*****

aws apigateway update-method --rest-api-id xb8z31jg5g --resource-id 3j9y3c --http-method POST --patch-operations op='replace',path='/apiKeyRequired',value='true' --profile SystemDeveloper

*****

Create Key --TODO

*****

aws apigateway create-api-key --name InitializeDeviceAPIKey --enabled --profile SystemDeveloper
aws apigateway get-api-keys --name-query InitializeDeviceAPIKey --query "items[0].id" --output text --profile SystemDeveloper
aws apigateway create-usage-plan --name "InitializeDeviceUseagePlanAskDao" --description "Ask Dao Usage plan for InitializeDevice" --api-stages "apiId=xb8z31jg5g,stage=dev" --throttle "rateLimit=1000,burstLimit=2000" --profile SystemDeveloper
aws apigateway create-usage-plan-key --usage-plan-id mfg7ty --key-id 6ml17463hc --key-type "API_KEY" --profile SystemDeveloper  
aws apigateway put-method --rest-api-id xb8z31jg5g --resource-id 3j9y3c --http-method POST --authorization-type "API_KEY" --profile SystemDeveloper

*****

Set up the Lambda integration for the POST method (Stage Specific):

*****

To get the Amazon Resource Name (ARN) of your Lambda function, you can use the AWS CLI `get-function` command. Here's how:

aws lambda get-function --function-name AskDaoRegisterAffiliate-DEV --profile SystemDeveloper --query 'Configuration.FunctionArn' --output text
aws apigateway put-integration --rest-api-id xb8z31jg5g --resource-id n2awii --http-method POST --type AWS_PROXY --integration-http-method POST --uri arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:413988044972:function:AskDaoRegisterAffiliate-DEV/invocations --profile SystemDeveloper
aws apigateway create-deployment --rest-api-id xb8z31jg5g --stage-name dev --profile SystemDeveloper

aws lambda get-function --function-name AskDaoKeyExchange-STAGE --profile SystemDeveloper --query 'Configuration.FunctionArn' --output text
aws apigateway put-integration --rest-api-id xb8z31jg5g --resource-id 3j9y3c --http-method POST --type AWS_PROXY --integration-http-method POST --uri [ARN_OF_DEV_FUNCTION] --profile SystemDeveloper
aws apigateway create-deployment --rest-api-id xb8z31jg5g --stage-name stage --profile SystemDeveloper

aws lambda get-function --function-name AskDaoKeyExchange-PROD --profile SystemDeveloper --query 'Configuration.FunctionArn' --output text
aws apigateway put-integration --rest-api-id xb8z31jg5g --resource-id 3j9y3c --http-method POST --type AWS_PROXY --integration-http-method POST --uri [ARN_OF_DEV_FUNCTION] --profile SystemDeveloper
aws apigateway create-deployment --rest-api-id xb8z31jg5g --stage-name prod --profile SystemDeveloper



aws apigateway put-integration --rest-api-id xb8z31jg5g --resource-id 3j9y3c --http-method POST --type AWS_PROXY --integration-http-method POST --uri arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:413988044972:function:AskDaoKeyExchange/invocations --profile SystemDeveloper

aws lambda add-permission --function-name arn:aws:lambda:us-east-1:413988044972:function:AskDaoKeyExchange-DEV --statement-id ApiGateway-AskDaoKeyExchange-DEV-Invoke --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn arn:aws:execute-api:us-east-1:413988044972:xb8z31jg5g/*/POST/versionCheck --profile SystemDeveloper

Deploy:
aws apigateway create-deployment --rest-api-id xb8z31jg5g --stage-name dev --profile SystemDeveloper
{
    "id": "4h94o3",
    "createdDate": "2023-07-01T21:29:25-04:00"
}

Mac
curl -X POST -H "Content-Type: application/json" -d '{
  "deviceUUID": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
  "preferredLanguage": "en"
}' https://xb8z31jg5g.execute-api.us-east-1.amazonaws.com/dev/initializeDevice




PC
curl -X POST -H "x-api-key: WtzkXJeJB74iMcolsp3vPawbh6rdveKP3K3GB7IP" -H "Content-Type: application/json" -d "{\"deviceUUID\":\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\"preferredLanguage\": \"en\"}" https://xb8z31jg5g.execute-api.us-east-1.amazonaws.com/dev/initializeDevice

curl -k -X POST -H "Content-Type: application/json" -d "{\"deviceUUID\":\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\"preferredLanguage\": \"en\"}" https://xb8z31jg5g.execute-api.us-east-1.amazonaws.com/dev/initializeDevice

curl -k -X POST -H "x-api-key: WtzkXJeJB74iMcolsp3vPawbh6rdveKP3K3GB7IP" -H "Content-Type: application/json" -d "{\"deviceUUID\":\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\"preferredLanguage\": \"en\"}" https://xb8z31jg5g.execute-api.us-east-1.amazonaws.com/dev/initializeDevice

curl -k -X POST -H "x-api-key: WtzkXJeJB74iMcolsp3vPawbh6rdveKP3K3GB7IP" -H "Content-Type: application/json" -d "{\"application_name\":\"AskDaoKapra\",\"deviceUUID\":\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\"application_identifier\":\"com.hepe.askdaokapra\",\"ip_address\":\"192.168.1.12\",\"preferredLanguage\": \"en\"}" https://xb8z31jg5g.execute-api.us-east-1.amazonaws.com/dev/initializeDevice